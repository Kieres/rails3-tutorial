# Leniwce z o.o.

To klon Pastie napisany w Rails 3 + ActiveRecord.

Czym jest „pastie”? Oto przykłady:

* [pastie](http://pastie.org/)
* [pastebin](http://pastebin.com/)

Jak stworzyć klona pastie w Sinatrze + Datamapper
opisał Nick Plante, [Clone Pastie with Sinatra & DataMapper 
0.9](http://blog.zerosum.org/2008/7/2/clone-pastie-with-sinatra-datamapper-redux).

Tak wygląda strona główna *pastie.org*:

{%= image_tag "/images/pastie.png", :alt => "[http://pastie.org]" %}

## Opis funkcjonalności aplikacji

Fragmenty kodu będziemy wklejać na stronie głównej strony:

    http://leniwce.org:3000/

Po kliknięciu przycisku „Wklej” wklejony kod zostanie
zapisany w tabelce a my zostaniemy przekierowani na stronę
z ładnie podkolorowanym kodem, np.

    http://leniwce.org:3000/128

Od tej chwili po wsze czasy będzie on dostepny pod tym adresem.

Następna wersja aplikacji będzie miała na każdej stronie
formularz umożliwiający wyszukiwanie fragmentów kodu
zawierającą podaną frazę.


## Generujemy rusztowanie aplikacji

Fragmenty kodu będziemy zapisywać w tabelce *wlepki*.
Strona główna będzie dostępna z:

    http://localhost:3000/wlepki/

Wklejone fragmenty kodu będą dostępne z:

    http://localhost:3000/:id

Będziemy korzystać z SQLite + ActiveRecord:

    rails wlepka

Zaczynamy od nauczenia Railsów liczby mnogiej słowa *wlepka*.
Wpisujemy do pliku *initializers.rb*:

    :::ruby
    ActiveSupport::Inflector.inflections do |inflect|
      inflect.irregular 'wlepka', 'wlepki'  
    end

Dopiero teraz generujemy model:

    script/generate model wlepka lang:string body:text

i migrujemy:

    rake db:migrate

## Model *Wlepki*

<blockquote>
{%= image_tag "/images/mvc.png", :alt => "[MVC]" %}
</blockquote>

Na SQlite `dbconsole`:

    :::sql
    insert into wlepki (lang, body) 
        values("ruby", "puts 1");
    insert into wlepki (lang, body) 
        values("html", "<html></html>");

<blockquote>
{%= image_tag "/images/wlepka.png", :alt => "[wlepka.rb]" %}
</blockquote>

Na Rails `console`:

    :::sql_rails
    Wlepka.all
    Wlepka.all(:conditions => ["lang = ?", "ruby"])
    Wlepka.all(:conditions =>
      ["lang = ? and body like ?", "ruby", "%puts%"])

Więcej przykładowych poleceń jest 
[tutaj](http://apidock.com/rails/ActiveRecord/Base)

    :::sql_rails
    w = Wlepka.new :lang => "css", 
        :body => "h1 { color: red; }"
    w.save
    
    Wlepka.create :lang => "css", 
        :body => "h1 { background-color: blue; }"


## Generujemy kontroler

<blockquote>
{%= image_tag "/images/mvc.png", :alt => "[MVC]" %}
</blockquote>

W zgodzie z konwencją nazwa kontrolera jest liczbą mnogą
od *wlepka*:

    script/generate controller wlepki

Kontroller *wlepki_controller.rb*:

<blockquote>
{%= image_tag "/images/wlepki_controller.png", :alt => "[wlepki_controller.rb]" %}
</blockquote>

    :::ruby
    class WlepkiController < ApplicationController
      
      def index
        @wlepka = Wlepka.new
      end
    
      def show
        @wlepka = Wlepka.find(params[:id])
      end
      
      def create
        @wlepka = Wlepka.new(params[:wlepka])
    
        if @wlepka.save
          flash[:notice] = 'Zapisano wlepkę w bazie.'
          redirect_to(:action => "show", :id => @wlepka.id) 
        else
          render :action => "index"
        end
      end
  
    end

## Tworzymy dwa widoki

<blockquote>
{%= image_tag "/images/mvc.png", :alt => "[MVC]" %}
</blockquote>

Strona główna, czyli widok *index.html.erb*:

    :::html_rails
    <% form_for :wlepka, 
         :url => { :action => "create" }  do |f| %>
      <%= f.error_messages %>
    
      <p>
        <%= f.label :lang, "Wybierz język" %><br /> 
        <%= f.select :lang, @languages %>
      </p>
      <p>
        <%= f.label :body, "Wklej kod:" %><br />
        <%= f.text_area :body, :cols => 80, :rows => 20 %>
      </p>
      <p>
        <%= f.submit 'Wklej' %>
      </p>
    <% end %>

Widok *show.html.erb*:

    :::html_rails
    <h1>Wlepka: <%= @wlepka.lang %></h1>
    <%= @wlepka.body %>
    <%= link_to 'Nowa wlepka', :action => "index" %>


## Projektujemy routing

<blockquote>
{%= image_tag "/images/mvc.png", :alt => "[MVC]" %}
</blockquote>

The routing *ActionController::Routing* module provides URL rewriting
in native Ruby. It’s a way to redirect incoming requests to
controllers and actions. This replaces mod_rewrite rules. Best of all,
Rails' Routing works with any web server. Routes are defined in
*config/routes.rb*.
\[[więcej](http://apidock.com/rails/ActionController/Routing)\]

    :::ruby
    ActionController::Routing::Routes.draw do |map|
      map.root :controller => "wlepki", :action => "index"
      # w tej kolejności:
      map.connect ':action/:id', :controller => "wlepki"
      map.connect ':id', :controller => "wlepki", :action => "show"
    end


## Dodajemy kolorowanie składni

Poprawiamy kontroller:

    :::ruby
    class WlepkiController < ApplicationController
      def show
        @wlepka = Wlepka.find(params[:id])
        @wlepka.body = ::Uv.parse(@wlepka.body, 'xhtml', @wlepka.lang, false, "dawn")  
      end

oraz *environment.rb*:

    :::ruby
    require 'uv'
    Rails::Initializer.run do |config|
      config.gem 'ultraviolet' 


## Gotowce

Gotowy layout, *application.html.erb* wrzucamy do katalogu *layout*:

    :::html_rails
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
           "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
      <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
      <title>Leniwce z o.o.</title>
      <%= stylesheet_link_tag 'application', 'uv' %>
    </head>
    <body>
      <h1>Leniwce z o.o.</h1>
        <p style="color: green"><%= flash[:notice] %></p>
    <%= yield %>
    </body>
    </html>

Plik *uv.css* kopiujemy z katalogu *stylesheets* tego samouczka.


## Filter parameter logging

Pamiętamy też o skróceniu logów:

    :::ruby
    class ApplicationController < ActionController::Base
      
      # Scrub sensitive parameters from your log
      filter_parameter_logging :body
    end

## TODO

1. Użyć *named routes*.
2. Dodać „porządny” layout.
3. Dodać wyszukiwanie z paginacją: sphinx?, xapian?
4. Użyć innego ORM, np. datamapper
   \([przykład](http://github.com/dkubb/datamapper-on-rails/)\).
5. Wpisać listę języków do tabelki *languages* i pobrać tę listę 
   z tej tabelki.
